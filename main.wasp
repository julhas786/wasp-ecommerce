app ecommerce {
  wasp: {
    version: "^0.13.0"
  },
  title: "ecommerce",
  client: {
    rootComponent: import { Layout } from "@src/Layout.jsx"
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  }
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@src/pages/auth/Signup.jsx"
}

entity User {=psl
    id     Int     @id @default(autoincrement())
    orders Order[]
psl=}

entity Product {=psl
    id           Int            @id @default(autoincrement())
    name         String
    description  String
    price        Float
    categories   String
    inventory    Int            @default(0)
    reviews      Review[]
    ProductOrder ProductOrder[]
psl=}

entity Order {=psl
    id       Int            @id @default(autoincrement())
    total    Float
    status   String
    products ProductOrder[]
    user     User           @relation(fields: [userId], references: [id])
    userId   Int
psl=}

entity ProductOrder {=psl
    id        Int     @id @default(autoincrement())
    product   Product @relation(fields: [productId], references: [id])
    productId Int
    order     Order   @relation(fields: [orderId], references: [id])
    orderId   Int
    quantity  Int
psl=}

entity Review {=psl
    id        Int     @id @default(autoincrement())
    rating    Int
    comment   String
    product   Product @relation(fields: [productId], references: [id])
    productId Int
psl=}

action createOrder {
  fn: import { createOrder } from "@src/actions.js",
  entities: [Order, User, Product]
}

action addToCart {
  fn: import { addToCart } from "@src/actions.js",
  entities: [User, Product]
}

action removeFromCart {
  fn: import { removeFromCart } from "@src/actions.js",
  entities: [Product, User]
}

action updateOrder {
  fn: import { updateOrder } from "@src/actions.js",
  entities: [Order, User, Product]
}

action createReview {
  fn: import { createReview } from "@src/actions.js",
  entities: [Review, Product]
}

query getProduct {
  fn: import { getProduct } from "@src/queries.js",
  entities: [Product]
}

query getProducts {
  fn: import { getProducts } from "@src/queries.js",
  entities: [Product]
}

query getOrder {
  fn: import { getOrder } from "@src/queries.js",
  entities: [Order]
}

query getOrders {
  fn: import { getOrders } from "@src/queries.js",
  entities: [Order]
}

query getReviews {
  fn: import { getReviews } from "@src/queries.js",
  entities: [Review]
}

route HomeRoute { path: "/", to: HomePage }
page HomePage {
  component: import HomePage from "@src/pages/Home.jsx",
  authRequired: false
}

route ProductListRoute { path: "/products", to: ProductListPage }
page ProductListPage {
  component: import ProductListPage from "@src/pages/ProductList.jsx",
  authRequired: false
}

route ProductDetailsRoute { path: "/product/:productId", to: ProductDetailsPage }
page ProductDetailsPage {
  component: import ProductDetailsPage from "@src/pages/ProductDetails.jsx",
  authRequired: false
}

route CartRoute { path: "/cart", to: CartPage }
page CartPage {
  component: import CartPage from "@src/pages/Cart.jsx",
  authRequired: false
}

route CheckoutRoute { path: "/checkout", to: CheckoutPage }
page CheckoutPage {
  component: import CheckoutPage from "@src/pages/Checkout.jsx",
  authRequired: false
}

route OrderConfirmationRoute { path: "/order/:orderId", to: OrderConfirmationPage }
page OrderConfirmationPage {
  component: import OrderConfirmationPage from "@src/pages/OrderConfirmation.jsx",
  authRequired: false
}

route ProfileRoute { path: "/profile", to: ProfilePage }
page ProfilePage {
  component: import ProfilePage from "@src/pages/Profile.jsx",
  authRequired: true
}
